variables:
  IMAGE_TAG: $CI_COMMIT_SHORT_SHA
  DOCKER_IMAGE_BACKEND: "$DOCKERHUB_USERNAME/back-right-backend"
  DOCKER_IMAGE_FRONTEND: "$DOCKERHUB_USERNAME/back-right-frontend"
  DOCKER_IMAGE_PROXY: "$DOCKERHUB_USERNAME/back-right-proxy"
  DOCKER_HOST: "unix:///var/run/docker.sock"

stages:
  - build
  - push
  - deploy

before_script:
  - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
  - eval $(ssh-agent -s)
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - ssh-keyscan i12a601.p.ssafy.io >> ~/.ssh/known_hosts
  - echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
  
build:
  stage: build
  script:
    - docker build -t $DOCKER_IMAGE_BACKEND:$IMAGE_TAG ./backend
    - docker build -t $DOCKER_IMAGE_FRONTEND:$IMAGE_TAG ./frontend
    - docker build -t $DOCKER_IMAGE_PROXY:$IMAGE_TAG ./nginx
    - echo "=== 현재 Runner 내부 Docker 이미지 목록 ==="
    - docker images  # 빌드된 이미지 목록 확인

push:
  stage: push
  script:
    - echo "Docker image === backend $DOCKER_IMAGE_BACKEND"
    - echo "IMAGE_TAG === $IMAGE_TAG"
    - docker images
    - docker push $DOCKER_IMAGE_BACKEND:$IMAGE_TAG
    - docker push $DOCKER_IMAGE_FRONTEND:$IMAGE_TAG
    - docker push $DOCKER_IMAGE_PROXY:$IMAGE_TAG
deploy:
  stage: deploy
  only:
    - main  # main 브랜치에 push될 때만 배포 실행
    - feature/ci-cd
  script:
    - ssh ubuntu@$SERVER_HOST << 'EOF'
      cd deploy && \
      docker-compose down && \
      docker pull $DOCKER_IMAGE_BACKEND:$IMAGE_TAG && \
      docker pull $DOCKER_IMAGE_FRONTEND:$IMAGE_TAG && \
      docker pull $DOCKER_IMAGE_PROXY:$IMAGE_TAG && \
      docker-compose up -d
      EOF
    